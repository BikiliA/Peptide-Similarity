import pandas as pd

df1 = pd.read_csv("DB_peptides_MAP4_2048_New.csv", sep=",")

#Convert column from object to str
df1['pMIC']= df1['pMIC'].astype(str)

#Remplacing commas by dots
df1['pMIC'] = df1['pMIC'].replace(',','.', regex=True)

#Convert string column to numeric
df1['pMIC'] = pd.to_numeric(df1['pMIC'],errors = 'coerce')

df2 = df1[['Fingerprint_MAP4']]


# ==============================================================================

from rdkit import Chem
import tmap as tm
from map4 import MAP4Calculator

# Rdkit import for molecular features
import rdkit
import rdkit.Chem
import rdkit.Chem.Fragments
import rdkit.Chem.Descriptors

import rdkit.Chem.rdchem
from rdkit.Chem import AllChem, Draw

from rdkit.Chem import MACCSkeys
import awkward as ak

# ==============================================================================

#COnditions
dim = 2048

MAP4 = MAP4Calculator(dimensions=dim)
ENC = tm.Minhash(dim)

# ==============================================================================
#MAP4 fingerprint iterative calculations
FP2 =  [MAP4.calculate(rdkit.Chem.MolFromSmiles(x)) for x in df1["SMILES "]]

# ==============================================================================
#Extrat an examples
molecule_a = FP2[0]
molecule_b = FP2[1]

#Testing similarity calculations
print(ENC.get_distance(molecule_a, molecule_b))

# ==============================================================================

# All possible pairs in List FINGERPRINT
# Using combinations()
from itertools import combinations
  
# initializing list
test_list = FP2
  
# All possible pairs in List
# Using combinations()
FP3 = list(combinations(test_list, 2))

# ==============================================================================
# optimization with a "for" funtion
Distances = pd.DataFrame([ENC.get_distance(y[0], y[1]) for y in FP3])

#Create a funtion that incorpore the peptide names and pMIC equivalent to FP2
FP2_names = df1['ID']
FP2_pMIC = df1['pMIC'

# All possible pairs in List names NAMES
from itertools import combinations
  
# initializing list
test_list_names = FP2_names
  
# All possible pairs in List
FP3_names = list(combinations(test_list_names, 2))

#Create a funtion to rename peptide IDs bye pairs
Paired_names = pd.DataFrame((n[0]+"_"+n[1]) for n in FP3_names)

#Changing columsn names of dataframes
Distances.columns =['Distances']
Paired_names.columns =['IDs']

#Merge Distances values and Paired Names
Merge1 = pd.concat([Paired_names, Distances], axis = 1)

# All possible pairs in List pMIC VALUES
from itertools import combinations
  
# initializing list
test_list_pMIC = FP2_pMIC
  
# All possible pairs in List
FP3_pMIC = list(combinations(test_list_pMIC, 2))

#Create a funtion to calculate the pMIC diferences
Paired_pMIC_Dif = pd.DataFrame((abs(m[0]-m[1])) for m in FP3_pMIC)
Paired_pMIC_Dif.columns =['Activity_Diferences']
Paired_pMIC_Dif

#Merge "Merge1" and Activity diferences data
Merge2 = pd.concat([Merge1, Paired_pMIC_Dif], axis = 1)
Merge2

# ==============================================================================
## SALI value calculations
## SALI = |ACT(i) -ACT(j)| / (1- SIM(i,j)

#Generatin 1-SIM(i,j) values
Merge2['1-Distances'] = pd.DataFrame((1-(p)) for p in Merge2['Distances'])

